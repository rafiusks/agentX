import React, { useState } from 'react';
import { useApiKeys, useCreateApiKey, useDeleteApiKey } from '../../hooks/queries/useApiKeys';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Label } from '../ui/label';
import { Card } from '../ui/card';
import { 
  Key, 
  Plus, 
  Copy, 
  Trash2, 
  Eye, 
  EyeOff,
  AlertCircle,
  CheckCircle,
  Loader2,
  Calendar,
  Shield
} from 'lucide-react';

// Using ApiKey type from useApiKeys hook

export const ApiKeys: React.FC = () => {
  const { data: apiKeys = [], isLoading: isLoadingKeys } = useApiKeys();
  const createApiKeyMutation = useCreateApiKey();
  const deleteApiKeyMutation = useDeleteApiKey();
  // Removed isLoading state - using hook loading states instead
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [copiedKeyId, setCopiedKeyId] = useState<string | null>(null);
  const [visibleKeys, setVisibleKeys] = useState<Set<string>>(new Set());
  const [newKeyResponse, setNewKeyResponse] = useState<{ id: string; key: string } | null>(null);
  
  // Form state for new API key
  const [formData, setFormData] = useState({
    name: '',
    scopes: [] as string[],
    expiresIn: '90' // days
  });

  const availableScopes = [
    { value: 'chat:read', label: 'Read chat messages', description: 'View chat history and messages' },
    { value: 'chat:write', label: 'Write chat messages', description: 'Send messages and create chats' },
    { value: 'connections:read', label: 'Read connections', description: 'View provider connections' },
    { value: 'connections:write', label: 'Manage connections', description: 'Create and modify connections' },
    { value: 'user:read', label: 'Read profile', description: 'View user profile information' },
    { value: 'user:write', label: 'Update profile', description: 'Modify user profile' }
  ];

  // Removed useEffect and loadApiKeys - now using useApiKeys hook

  const handleCreateKey = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.name || formData.scopes.length === 0) {
      setError('Please provide a name and select at least one scope');
      return;
    }

    createApiKeyMutation.mutate(
      {
        provider: 'openai', // Default provider - you may want to make this selectable
        api_key: 'generated-key', // This will be generated by the backend
        label: formData.name,
        metadata: {
          scopes: formData.scopes,
          expires_at: formData.expiresIn === '0' ? null : new Date(Date.now() + parseInt(formData.expiresIn) * 24 * 60 * 60 * 1000).toISOString()
        }
      },
      {
        onSuccess: (data) => {
          setNewKeyResponse({ id: data.id, key: data.key_hint });
          setShowCreateForm(false);
          setFormData({ name: '', scopes: [], expiresIn: '90' });
          setSuccessMessage('API key created successfully');
        },
        onError: (err: any) => {
          setError(err.message || 'Failed to create API key');
        }
      }
    );
  };

  const handleDeleteKey = (keyId: string) => {
    if (!confirm('Are you sure you want to delete this API key? This action cannot be undone.')) {
      return;
    }

    deleteApiKeyMutation.mutate(keyId, {
      onSuccess: () => {
        setSuccessMessage('API key deleted successfully');
        setTimeout(() => setSuccessMessage(''), 3000);
      },
      onError: (err: any) => {
        setError(err.message || 'Failed to delete API key');
      }
    });
  };

  const copyToClipboard = async (text: string, keyId: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopiedKeyId(keyId);
      setTimeout(() => setCopiedKeyId(null), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const toggleKeyVisibility = (keyId: string) => {
    const newVisible = new Set(visibleKeys);
    if (newVisible.has(keyId)) {
      newVisible.delete(keyId);
    } else {
      newVisible.add(keyId);
    }
    setVisibleKeys(newVisible);
  };


  const handleScopeToggle = (scope: string) => {
    setFormData(prev => ({
      ...prev,
      scopes: prev.scopes.includes(scope)
        ? prev.scopes.filter(s => s !== scope)
        : [...prev.scopes, scope]
    }));
  };

  return (
    <div className="max-w-6xl mx-auto p-6">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-3xl font-bold text-foreground-primary">
            API Keys
          </h1>
          <p className="text-foreground-secondary mt-2">
            Manage API keys for programmatic access to AgentX
          </p>
        </div>
        
        {!showCreateForm && !newKeyResponse && (
          <Button
            onClick={() => setShowCreateForm(true)}
            className="flex items-center"
          >
            <Plus className="h-4 w-4 mr-2" />
            Create New Key
          </Button>
        )}
      </div>

      {successMessage && (
        <div className="mb-4 bg-accent-green/10 border border-accent-green/30 rounded-md p-4">
          <div className="flex">
            <CheckCircle className="h-5 w-5 text-accent-green mr-2" />
            <p className="text-sm text-accent-green">
              {successMessage}
            </p>
          </div>
        </div>
      )}

      {error && (
        <div className="mb-4 bg-accent-red/10 border border-accent-red/30 rounded-md p-4">
          <div className="flex">
            <AlertCircle className="h-5 w-5 text-accent-red mr-2" />
            <p className="text-sm text-accent-red">
              {error}
            </p>
          </div>
        </div>
      )}

      {/* New Key Created Alert */}
      {newKeyResponse && (
        <Card className="mb-6 p-6 bg-accent-blue/10 border border-accent-blue/30">
          <div className="space-y-4">
            <div className="flex items-start">
              <AlertCircle className="h-5 w-5 text-accent-blue mr-2 mt-0.5" />
              <div className="flex-1">
                <h3 className="font-semibold text-accent-blue">
                  API Key Created Successfully
                </h3>
                <p className="text-sm text-accent-blue mt-1">
                  Make sure to copy your API key now. You won't be able to see it again!
                </p>
              </div>
            </div>
            
            <div className="bg-background-primary rounded-md p-3 font-mono text-sm flex items-center justify-between">
              <span className="text-foreground-primary break-all">
                {newKeyResponse.key}
              </span>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => copyToClipboard(newKeyResponse.key, newKeyResponse.id)}
                className="ml-2"
              >
                {copiedKeyId === newKeyResponse.id ? (
                  <CheckCircle className="h-4 w-4 text-accent-green" />
                ) : (
                  <Copy className="h-4 w-4" />
                )}
              </Button>
            </div>
            
            <Button
              onClick={() => setNewKeyResponse(null)}
              variant="default"
              className="w-full"
            >
              I've Saved My Key
            </Button>
          </div>
        </Card>
      )}

      {/* Create New Key Form */}
      {showCreateForm && (
        <Card className="mb-6 p-6">
          <h2 className="text-xl font-semibold mb-4">Create New API Key</h2>
          
          <form onSubmit={handleCreateKey} className="space-y-4">
            <div>
              <Label htmlFor="name">Key Name</Label>
              <Input
                id="name"
                type="text"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                placeholder="Production API Key"
                className="mt-1"
                required
              />
              <p className="text-xs text-foreground-tertiary mt-1">
                A descriptive name to identify this key
              </p>
            </div>

            <div>
              <Label>Permissions</Label>
              <div className="mt-2 space-y-2">
                {availableScopes.map(scope => (
                  <label
                    key={scope.value}
                    className="flex items-start p-3 border rounded-lg cursor-pointer hover:bg-background-tertiary"
                  >
                    <input
                      type="checkbox"
                      checked={formData.scopes.includes(scope.value)}
                      onChange={() => handleScopeToggle(scope.value)}
                      className="mt-1 mr-3"
                    />
                    <div className="flex-1">
                      <div className="font-medium text-sm">{scope.label}</div>
                      <div className="text-xs text-foreground-tertiary">
                        {scope.description}
                      </div>
                    </div>
                  </label>
                ))}
              </div>
            </div>

            <div>
              <Label htmlFor="expires">Expiration (days)</Label>
              <select
                id="expires"
                value={formData.expiresIn}
                onChange={(e) => setFormData({ ...formData, expiresIn: e.target.value })}
                className="mt-1 w-full px-3 py-2 border rounded-md bg-background-primary"
              >
                <option value="30">30 days</option>
                <option value="90">90 days</option>
                <option value="180">180 days</option>
                <option value="365">1 year</option>
                <option value="0">Never</option>
              </select>
            </div>

            <div className="flex gap-3">
              <Button
                type="submit"
                disabled={createApiKeyMutation.isPending || !formData.name || formData.scopes.length === 0}
                className="flex-1"
              >
                {createApiKeyMutation.isPending ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Creating...
                  </>
                ) : (
                  <>
                    <Key className="mr-2 h-4 w-4" />
                    Create Key
                  </>
                )}
              </Button>
              <Button
                type="button"
                variant="outline"
                onClick={() => {
                  setShowCreateForm(false);
                  setFormData({ name: '', scopes: [], expiresIn: '90' });
                  setError('');
                }}
              >
                Cancel
              </Button>
            </div>
          </form>
        </Card>
      )}

      {/* API Keys List */}
      {isLoadingKeys && !showCreateForm ? (
        <div className="flex justify-center py-12">
          <Loader2 className="h-8 w-8 animate-spin text-foreground-tertiary" />
        </div>
      ) : apiKeys.length === 0 ? (
        <Card className="p-12 text-center">
          <Key className="h-12 w-12 text-foreground-tertiary mx-auto mb-4" />
          <h3 className="text-lg font-medium text-foreground-primary mb-2">
            No API Keys Yet
          </h3>
          <p className="text-foreground-secondary">
            Create your first API key to start using AgentX programmatically
          </p>
        </Card>
      ) : (
        <div className="space-y-4">
          {apiKeys.map(apiKey => (
            <Card key={apiKey.id} className="p-4">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <h3 className="font-semibold text-foreground-primary">
                      {apiKey.label || apiKey.provider}
                    </h3>
                    <div className="flex gap-2">
                      <span
                        className="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-background-tertiary text-foreground-primary"
                      >
                        {apiKey.provider}
                      </span>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-4 text-sm text-foreground-tertiary">
                    <div className="flex items-center">
                      <Calendar className="h-4 w-4 mr-1" />
                      Created {new Date(apiKey.created_at).toLocaleDateString()}
                    </div>
                    {apiKey.last_used_at && (
                      <div className="flex items-center">
                        <Shield className="h-4 w-4 mr-1" />
                        Last used {new Date(apiKey.last_used_at).toLocaleDateString()}
                      </div>
                    )}
                  </div>
                  
                  <div className="flex items-center gap-2 mt-3">
                    <code className="px-2 py-1 bg-background-tertiary rounded text-sm font-mono">
                      {visibleKeys.has(apiKey.id) ? `sk-...${apiKey.key_hint}` : `••••${apiKey.key_hint}`}
                    </code>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => toggleKeyVisibility(apiKey.id)}
                    >
                      {visibleKeys.has(apiKey.id) ? (
                        <EyeOff className="h-4 w-4" />
                      ) : (
                        <Eye className="h-4 w-4" />
                      )}
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => alert('API keys cannot be retrieved after creation')}
                    >
                      {copiedKeyId === apiKey.id ? (
                        <CheckCircle className="h-4 w-4 text-accent-green" />
                      ) : (
                        <Copy className="h-4 w-4" />
                      )}
                    </Button>
                  </div>
                </div>
                
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => handleDeleteKey(apiKey.id)}
                  className="text-accent-red hover:text-accent-red/80 hover:bg-accent-red/10"
                >
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};